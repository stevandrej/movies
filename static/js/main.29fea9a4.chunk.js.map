{"version":3,"sources":["components/Filters.jsx","components/Search.jsx","components/LatestMovies.jsx","components/MovieInfo.jsx","components/MoviesList.jsx","components/MainFrame.jsx","App.js","serviceWorker.js","index.js"],"names":["Filters","props","Fragment","className","Search","useState","search","setSearch","onSubmit","e","preventDefault","handleSearch","spellCheck","onChange","target","value","type","placeholder","LatestMovies","src","alt","MovieInfo","Poster","movie","Rating","Ratings","Value","actorsList","Actors","split","push","onClick","setView","data-itemid","imdbID","Title","Year","Rated","Genre","Plot","map","actor","index","key","MoviesList","numPages","Math","ceil","movies","length","indexOfLastPost","currentPage","indexOfFirstPost","displayData","slice","item","setId","Pagination","count","color","defaultPage","page","event","setCurrentPage","MainFrame","movieInfo","setMovieInfo","useEffect","a","fetch","id","process","then","response","json","result","view","fetchMovieInfo","data","Response","App","setMovies","isFirstRun","useRef","current","fetchMovies","style","backgroundImage","hasOwnProperty","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29fea9a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./filters.scss\";\r\n\r\nconst Filters = (props) => {\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            <h5 className=\"filter-type\">Genres</h5>\r\n            <ul className=\"filters\">\r\n                <li className=\"filters__item\">New movies</li>\r\n                <li className=\"filters__item\">Action</li>\r\n                <li className=\"filters__item\">Documentary</li>\r\n                <li className=\"filters__item\">Comedy</li>\r\n                <li className=\"filters__item\">Family</li>\r\n                <li className=\"filters__item\">Horror</li>\r\n                <li className=\"filters__item\">War</li>\r\n            </ul>\r\n        \r\n            <h5 className=\"filter-type\">Rated</h5>\r\n            <ul className=\"filters\">\r\n                <li className=\"filters__item\">G</li>\r\n                <li className=\"filters__item\">R</li>\r\n                <li className=\"filters__item\">PG</li>\r\n                <li className=\"filters__item\">PG-13</li>\r\n            </ul>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Filters;","import React, { useState } from \"react\";\r\nimport \"./search.scss\";\r\n\r\nconst Search = (props) => {\r\n    const [search, setSearch] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        props.handleSearch(search);\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <form className=\"searchbar\" onSubmit={handleSubmit} spellCheck='false'>\r\n            <input onChange={(e) => {setSearch(e.target.value)}} value={search} className=\"searchbar__field\" type=\"text\" placeholder=\"Search for movie...\"/>\r\n        </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport './latestMovies.scss';\r\n\r\nconst LatestMovies = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"latest_movies__heading\">Latest Movies</h3>\r\n            <ul className=\"latest_movies__list\">\r\n                <li className=\"latest_movies__item\">\r\n                    <div className=\"latest_movies__item-left\">\r\n                        <img className=\"latest_movies__item__img\" src=\"/img/bad-boys-forlife.jpg\" alt=\"movie cover\" />\r\n                    </div>\r\n                    <div className=\"latest_movies__item-right\">\r\n                        <h4 className=\"latest_movies__item__title\" >Bad boys for life</h4>\r\n                        <p className=\"latest_movies__item__rating\">Rated R</p>\r\n                        <p className=\"latest_movies__item__genre\">Comedy/Action</p>\r\n                    </div>\r\n                </li>\r\n\r\n                <li className=\"latest_movies__item\">\r\n                    <div className=\"latest_movies__item-left\">\r\n                        <img className=\"latest_movies__item__img\" src=\"/img/harley-queen.jpg\" alt=\"movie cover\" />\r\n                    </div>\r\n                    <div className=\"latest_movies__item-right\">\r\n                        <h4 className=\"latest_movies__item__title\" >Harley Quinn: Birds of Prey</h4>\r\n                        <p className=\"latest_movies__item__rating\">Rated R</p>\r\n                        <p className=\"latest_movies__item__genre\">Action/Superhero</p>\r\n                    </div>\r\n                </li>\r\n\r\n                <li className=\"latest_movies__item\">\r\n                    <div className=\"latest_movies__item-left\">\r\n                        <img className=\"latest_movies__item__img\" src=\"/img/sonic.jpg\" alt=\"movie cover\" />\r\n                    </div>\r\n                    <div className=\"latest_movies__item-right\">\r\n                        <h4 className=\"latest_movies__item__title\" >Sonic the Hedgehog</h4>\r\n                        <p className=\"latest_movies__item__rating\">Rated R</p>\r\n                        <p className=\"latest_movies__item__genre\">Adventure/Family</p>\r\n                    </div>\r\n                </li>\r\n\r\n                <li className=\"latest_movies__item\">\r\n                    <div className=\"latest_movies__item-left\">\r\n                        <img className=\"latest_movies__item__img\" src=\"/img/bloodshot.jpg\" alt=\"movie cover\" />\r\n                    </div>\r\n                    <div className=\"latest_movies__item-right\">\r\n                        <h4 className=\"latest_movies__item__title\" >Bloodshot</h4>\r\n                        <p className=\"latest_movies__item__rating\">Rated PG-13</p>\r\n                        <p className=\"latest_movies__item__genre\">Action/Adventure</p>\r\n                    </div>\r\n                </li>\r\n\r\n                <li className=\"latest_movies__item\">\r\n                    <div className=\"latest_movies__item-left\">\r\n                        <img className=\"latest_movies__item__img\" src=\"../img/onward.jpg\" alt=\"movie cover\" />\r\n                    </div>\r\n                    <div className=\"latest_movies__item-right\">\r\n                        <h4 className=\"latest_movies__item__title\" >Onward</h4>\r\n                        <p className=\"latest_movies__item__rating\">Rated PG</p>\r\n                        <p className=\"latest_movies__item__genre\">Family/Animation</p>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LatestMovies;","import React from 'react';\r\nimport './movieInfo.scss';\r\n\r\nconst MovieInfo = (props) => {\r\n\r\n    //Check if there is a cover image for the movie\r\n    let Poster;\r\n    (props.movie.Poster === '' || props.movie.Poster === 'N/A') ? Poster = 'img/no-image.jpg' : Poster = props.movie.Poster ;\r\n\r\n    //Check if there is a Rating for the movie\r\n    if (props.movie) {\r\n\r\n        let Rating;\r\n        try{\r\n            Rating = props.movie.Ratings[0].Value;\r\n        }\r\n        catch(e){\r\n            Rating = 'N/A';\r\n        }\r\n\r\n        //Check if there are actors in the API response\r\n        let actorsList = [];\r\n        props.movie.Actors !== '' ? \r\n            actorsList = props.movie.Actors.split(', ') : actorsList.push('There are no actors in our database for this movie');\r\n\r\n        //RENDER UI\r\n        return (\r\n            <div className=\"movieView\">\r\n            <button className=\"backBtn\" onClick={ () => { props.setView('blog') } }>&lt; Back</button>\r\n\r\n            <div className=\"movie\" data-itemid={props.movie.imdbID}>\r\n                <div className=\"movie__img\">\r\n                    <img src={Poster} alt={props.movie.Title} />\r\n                </div>\r\n\r\n                <div className=\"movie__content\">\r\n                    <div className=\"movie__content__title\">\r\n                        <h2 className=\"movie__content__title--title\">{props.movie.Title}</h2>\r\n                        <h3 className=\"movie__content__title--year\">{props.movie.Year}</h3>\r\n                    </div>\r\n\r\n                    <hr />\r\n\r\n                    <div className=\"movie__content__info\">\r\n                        <p className=\"movie__content__info--rated\">Rated: {props.movie.Rated}</p>\r\n                        <p className=\"movie__content__info--genres\">{props.movie.Genre}</p>\r\n                        <p className=\"movie__content__info--rating\">Rating: {Rating}</p>\r\n                    </div>\r\n\r\n                    <hr />\r\n\r\n                    <div className=\"movie__content__desc\">\r\n                        <h4>Plot:</h4>\r\n                        <p>\r\n                            {props.movie.Plot}\r\n                        </p>\r\n                    </div>\r\n\r\n                    <hr />\r\n\r\n                    <div className=\"movie__content__cast\">\r\n                        <h4>Main cast:</h4>\r\n                        <ul className=\"movie__content__cast-list\">\r\n                            {\r\n                                actorsList.map((actor, index) => {\r\n                                    return <li className=\"movie__content__cast--item\" key={`actor_${index}`}>{actor}</li>\r\n                                })\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>            \r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                <h5>Movie informations will show up here.</h5>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieInfo;","import React from 'react';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport './moviesList.scss';\r\n\r\n\r\nconst MoviesList = (props) => {\r\n\r\n    //props.movies = DATA OF MOVIES\r\n    const perPage = 4;\r\n    const numPages =  Math.ceil(props.movies.length / perPage);\r\n    const indexOfLastPost = props.currentPage * perPage;\r\n    const indexOfFirstPost = indexOfLastPost - perPage;\r\n    const displayData = props.movies.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n    const handleChange = (event, value) => {\r\n        props.setCurrentPage(value);\r\n      };\r\n\r\n    return(\r\n        <div className=\"moviesList\">\r\n        <div className=\"moviesList__container\">\r\n            {displayData.map(item => {\r\n                return(\r\n                    <div className=\"movies__item\" data-itemid={item.imdbID} key={`item_${item.imdbID}`} onClick={ () => {props.setId(item.imdbID); props.setView('single');} }>\r\n                        <img src={ (item.Poster==='N/A' || !item.Poster) ? `img/no-image.jpg` : item.Poster} alt={item.Title}  className=\"movies__item__image\"/>\r\n                        <h4>{item.Title}</h4>\r\n                        <h5>{item.Year}</h5>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        \r\n        <div className=\"pagination\">\r\n            <Pagination count={numPages} color=\"secondary\" defaultPage={1} page={props.currentPage} onChange={handleChange}/>\r\n        </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MoviesList;","import React, { useState, useEffect } from 'react';\r\nimport MovieInfo from './MovieInfo';\r\nimport MoviesList from './MoviesList';\r\n\r\nconst MainFrame = (props) => {\r\n\r\n    const [movieInfo, setMovieInfo] = useState('');\r\n\r\n\tuseEffect( () => {\r\n        async function fetchMovieInfo() {\r\n            await fetch(`http://www.omdbapi.com/?i=${props.id}&plot=full${process.env.REACT_APP_API_KEY}`)\r\n                .then(response => response.json())\r\n                .then(result => setMovieInfo(result));\r\n        }\r\n\r\n        if(props.view === 'single')\r\n            fetchMovieInfo();\r\n                \r\n    }, [props.view, props.id]);\r\n    \r\n\r\n    //There is a movie/s information\r\n    if(props.data.Response === \"True\")\r\n    {\r\n        if(props.view === 'blog')\r\n            return (\r\n                <MoviesList movies={props.data.Search} currentPage={props.currentPage} setCurrentPage={props.setCurrentPage} setView={props.setView} setId={props.setId}/>\r\n            );\r\n\r\n            if(props.view === 'single')\r\n            {\r\n                return <MovieInfo movie={movieInfo} setView={props.setView} />;\r\n            }\r\n    }      \r\n    //No movie was found\r\n    else if(props.data.Response === 'False'){\r\n        return(\r\n            <h5>We couldn't find a movie with that name.</h5>\r\n        );\r\n    }\r\n    else //First search / Empty string search / There is no answer from the API Search\r\n        return (\r\n            <div>\r\n                <h5>Movie informations will show up here.</h5>\r\n            </div>\r\n        );\r\n\r\n}\r\n\r\nexport default MainFrame;","import React, { useState, useEffect, useRef } from 'react';\nimport \"./App.scss\";\nimport \"./typography.scss\";\nimport Filters from './components/Filters';\nimport Search from './components/Search';\nimport LatestMovies from './components/LatestMovies';\nimport MainFrame from './components/MainFrame';\n\nconst App = () => {\n\n\tconst [movies, setMovies] = useState('');\n\tconst [search, setSearch] = useState('');\n\tconst [currentPage, setCurrentPage] = useState(1);\n\tconst [view, setView] = useState('blog');\n\tconst [id, setId] = useState('');\n\n\tconst isFirstRun = useRef(true);\n\tuseEffect(() => {\n\t\tif (isFirstRun.current) {\n\t\t\tisFirstRun.current = false;\n\t\t\treturn;\n\t\t}\n\t\tasync function fetchMovies() {\n\t\t\tawait fetch(`http://www.omdbapi.com/?s=${search}&plot=full${process.env.REACT_APP_API_KEY}`)\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(result => setMovies(result));\n\t\t}\n\t\tsearch !== '' ? fetchMovies() : setMovies('');\n\t\tsetCurrentPage(1);\n\t\tsetView('blog');\n\t\tsetId('');\n\n\t}, [search]);\n\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bgImg\" style={\n\t\t\t\t{\n\t\t\t\t\tbackgroundImage: (movies !== '' && movies.hasOwnProperty('Poster') && movies.Poster !== '' && movies.Poster !== 'N/A'  && movies.Response !== 'False') ? `url(${movies.Poster})` : `url('img/cinema.jpg')`\n\t\t\t\t}\n\t\t\t}></div>\n\t\t\t<div className=\"container\">\n\n\t\t\t\t<div className=\"side-left\">\n\t\t\t\t\t<div className=\"logo-container\">\n\t\t\t\t\t\t<img src='./img/logo-movie.png' alt=\"logo\" className=\"logo\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<Filters />\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"side-right\">\n\t\t\t\t\t<div className=\"search\">\n\t\t\t\t\t\t<Search handleSearch={setSearch} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"content\">\n\t\t\t\t\t\t<main className=\"main-frame\">\n\t\t\t\t\t\t\t<MainFrame data={movies} currentPage={currentPage} setCurrentPage={setCurrentPage} setView={setView} view={view} setId={setId} id={id}/>\n\t\t\t\t\t\t</main>\n\n\t\t\t\t\t\t<div className=\"latest_movies\">\n\t\t\t\t\t\t\t<LatestMovies />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}